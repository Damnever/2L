user vagrant;
worker_processes 2;

# error_log  /dev/null crit; # 使日志输出到无底洞…
error_log /var/log/nginx/error.log; # debug/info/notice/warn/error/crit

# 进程文件
pid /var/run/nginx.pid;

# 一个nginx进程打开的最多文件描述符数目
worker_rlimit_nofile 1024;

# 指定连接数上限和工作模式
events {
    worker_connections 1024;　# 每个进程的最大连接数（最大连接数＝进程数×连接数）
    use epoll; # 事件模型，poll, kqueue, select...
}

# 设定http服务器
http {
    # upstream的负载均衡
    upstream frontends {
        server 127.0.0.1:8001;  # weight=num，权重权值越高被分配到的几率越大
    }

    include /etc/nginx/mime.types;  # 文件扩展名与文件类型映射表
    default_type application/octet-stream;   # 默认文件类型　
    #charset utf-8;  # 默认编码

    access_log /var/log/nginx/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;  # 高效文件传输模式
    tcp_nopush on;  # 防止网络阻塞
    tcp_nodelay on;  # 防止网络阻塞
    gzip on;  # 开启 gzip 压缩输出
    gzip_min_length 1000; # 最小压缩文件大小
    gzip_proxied any;
    # 压缩类型
    gzip_types text/plain text/html text/css text/xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    server {
        listen 80;　　# 监听端口
        # server_name ; # 域名

        client_max_body_size 1M;

        location ^~ /static/ {
            root /vagrant/2L/app/;
            if ($query_string) {
                expires max; # 缓存时间
            }
        }
        location = /favicon.ico {
            rewrite (.*) /static/favicon.ico;
        }
        location = /robots.txt {
            rewrite (.*) /static/robots.txt;
        }

        # 反向代理
        location / {
            proxy_pass_header Server;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://frontends;  # 将所有的请求转接到upstream指定的一组server上，实现负载均衡
        }
    }
}
